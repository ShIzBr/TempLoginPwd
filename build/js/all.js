/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/some.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/cyrillic-to-translit-js/CyrillicToTranslit.js":
/*!********************************************************************!*\
  !*** ./node_modules/cyrillic-to-translit-js/CyrillicToTranslit.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function cyrillicToTranslit(config) {\n  const invert = __webpack_require__(/*! lodash.invert */ \"./node_modules/lodash.invert/index.js\");\n\n  const _preset = config ? config.preset : \"ru\";\n  /*\r\n  ASSOCIATIONS FOR INITIAL POSITION\r\n  */\n  // letters shared between languages\n\n\n  const _firstLetters = {\n    \"а\": \"a\",\n    \"б\": \"b\",\n    \"в\": \"v\",\n    \"д\": \"d\",\n    \"з\": \"z\",\n    \"й\": \"y\",\n    \"к\": \"k\",\n    \"л\": \"l\",\n    \"м\": \"m\",\n    \"н\": \"n\",\n    \"о\": \"o\",\n    \"п\": \"p\",\n    \"р\": \"r\",\n    \"с\": \"s\",\n    \"т\": \"t\",\n    \"у\": \"u\",\n    \"ф\": \"f\",\n    \"ь\": \"\"\n  }; // language-specific letters\n\n  if (_preset === \"ru\") {\n    Object.assign(_firstLetters, {\n      \"г\": \"g\",\n      \"и\": \"i\",\n      \"ъ\": \"\",\n      \"ы\": \"i\",\n      \"э\": \"e\"\n    });\n  } else if (_preset === \"uk\") {\n    Object.assign(_firstLetters, {\n      \"г\": \"h\",\n      \"ґ\": \"g\",\n      \"е\": \"e\",\n      \"и\": \"y\",\n      \"і\": \"i\",\n      \"'\": \"\",\n      \"’\": \"\",\n      \"ʼ\": \"\"\n    });\n  }\n\n  let _reversedFirstLetters;\n\n  if (_preset === \"ru\") {\n    // Russian: i > always и, y > й in initial position, e > э in initial position\n    _reversedFirstLetters = Object.assign(invert(_firstLetters), {\n      \"i\": \"и\",\n      \"\": \"\"\n    });\n  } else if (_preset === \"uk\") {\n    // Ukrainian: i > always i, y > always и, e > always е\n    _reversedFirstLetters = Object.assign(invert(_firstLetters), {\n      \"\": \"\"\n    });\n  } // digraphs appearing only in initial position\n\n\n  const _initialDigraphs = _preset === \"ru\" ? {\n    \"е\": \"ye\"\n  } : {\n    \"є\": \"ye\",\n    \"ї\": \"yi\"\n  }; // digraphs appearing in all positions\n\n\n  const _regularDigraphs = {\n    \"ё\": \"yo\",\n    \"ж\": \"zh\",\n    \"х\": \"kh\",\n    \"ц\": \"ts\",\n    \"ч\": \"ch\",\n    \"ш\": \"sh\",\n    \"щ\": \"shch\",\n    \"ю\": \"yu\",\n    \"я\": \"ya\"\n  };\n\n  const _firstDigraphs = Object.assign({}, _regularDigraphs, _initialDigraphs);\n\n  const _reversedFirstDigraphs = Object.assign(invert(_firstDigraphs));\n\n  const _firstAssociations = Object.assign(_firstLetters, _firstDigraphs);\n  /*\r\n  ASSOCIATIONS FOR NON-INITIAL POSITION\r\n  */\n\n\n  const _nonFirstLetters = Object.assign({}, _firstLetters, {\n    \"й\": \"i\"\n  });\n\n  if (_preset === \"ru\") {\n    Object.assign(_nonFirstLetters, {\n      \"е\": \"e\"\n    });\n  } else if (_preset === \"uk\") {\n    Object.assign(_nonFirstLetters, {\n      \"ї\": \"i\"\n    });\n  }\n\n  let _reversedNonFirstLetters;\n\n  if (_preset === \"ru\") {\n    // Russian: i > always и, y > ы in non-initial position, e > е in non-initial position\n    _reversedNonFirstLetters = Object.assign(invert(_firstLetters), {\n      \"i\": \"и\",\n      \"y\": \"ы\",\n      \"e\": \"е\",\n      \"\": \"\"\n    });\n  } else if (_preset === \"uk\") {\n    // Ukrainian: i > always i, y > always и, e > always е\n    _reversedNonFirstLetters = Object.assign(invert(_firstLetters), {\n      \"\": \"\"\n    });\n  } // digraphs appearing only in non-initial positions\n\n\n  let _nonInitialDigraphs = {};\n\n  if (_preset === \"uk\") {\n    _nonInitialDigraphs = {\n      \"є\": \"ie\",\n      \"ю\": \"iu\",\n      \"я\": \"ia\"\n    };\n  }\n\n  const _nonFirstDigraphs = Object.assign(_regularDigraphs, _nonInitialDigraphs);\n\n  const _reversedNonFirstDigraphs = Object.assign(invert(_nonFirstDigraphs));\n\n  const _nonFirstAssociations = Object.assign(_nonFirstLetters, _nonFirstDigraphs);\n\n  function transform(input, spaceReplacement) {\n    if (!input) {\n      return \"\";\n    } // We must normalize string for transform all unicode chars to uniform form\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\n\n    const normalizedInput = input.normalize();\n    let newStr = \"\";\n    let isWordBoundary = false;\n\n    for (let i = 0; i < normalizedInput.length; i++) {\n      const isUpperCaseOrWhatever = normalizedInput[i] === normalizedInput[i].toUpperCase();\n      let strLowerCase = normalizedInput[i].toLowerCase();\n\n      if (strLowerCase === \" \") {\n        newStr += spaceReplacement ? spaceReplacement : \" \";\n        isWordBoundary = true;\n        continue;\n      }\n\n      let newLetter;\n\n      if (_preset === \"uk\" && normalizedInput.slice(i - 1, i + 1).toLowerCase() === \"зг\") {\n        // handle ukrainian special case зг > zgh\n        newLetter = \"gh\";\n      } else if (i === 0 || isWordBoundary) {\n        newLetter = _firstAssociations[strLowerCase];\n        isWordBoundary = false;\n      } else {\n        newLetter = _nonFirstAssociations[strLowerCase];\n      }\n\n      if (\"undefined\" === typeof newLetter) {\n        newStr += isUpperCaseOrWhatever ? strLowerCase.toUpperCase() : strLowerCase;\n      } else if (isUpperCaseOrWhatever) {\n        // handle multi-symbol letters\n        newLetter.length > 1 ? newStr += newLetter[0].toUpperCase() + newLetter.slice(1) : newStr += newLetter.toUpperCase();\n      } else {\n        newStr += newLetter;\n      }\n    }\n\n    return newStr;\n  }\n\n  function reverse(input, spaceReplacement) {\n    if (!input) return \"\";\n    const normalizedInput = input.normalize();\n    let newStr = \"\";\n    let isWordBoundary = false;\n    let i = 0;\n\n    while (i < normalizedInput.length) {\n      const isUpperCaseOrWhatever = normalizedInput[i] === normalizedInput[i].toUpperCase();\n      let strLowerCase = normalizedInput[i].toLowerCase();\n      let currentIndex = i;\n\n      if (strLowerCase === \" \" || strLowerCase === spaceReplacement) {\n        newStr += \" \";\n        isWordBoundary = true;\n        i++;\n        continue;\n      }\n\n      let newLetter;\n      let digraph = normalizedInput.slice(i, i + 2).toLowerCase();\n\n      if (i === 0 || isWordBoundary) {\n        newLetter = _reversedFirstDigraphs[digraph];\n\n        if (newLetter) {\n          i += 2;\n        } else {\n          newLetter = _reversedFirstLetters[strLowerCase];\n          i++;\n        }\n\n        isWordBoundary = false;\n      } else {\n        newLetter = _reversedNonFirstDigraphs[digraph];\n\n        if (newLetter) {\n          i += 2;\n        } else {\n          newLetter = _reversedNonFirstLetters[strLowerCase];\n          i++;\n        }\n      } // special cases: щ and зг\n\n\n      if (normalizedInput.slice(currentIndex, currentIndex + 4).toLowerCase() === \"shch\") {\n        newLetter = \"щ\";\n        i = currentIndex + 4;\n      } else if (normalizedInput.slice(currentIndex - 1, currentIndex + 2).toLowerCase() === \"zgh\") {\n        newLetter = \"г\";\n        i = currentIndex + 2;\n      }\n\n      if (\"undefined\" === typeof newLetter) {\n        newStr += isUpperCaseOrWhatever ? strLowerCase.toUpperCase() : strLowerCase;\n      } else {\n        if (isUpperCaseOrWhatever) {\n          // handle multi-symbol letters\n          newLetter.length > 1 ? newStr += newLetter[0].toUpperCase() + newLetter.slice(1) : newStr += newLetter.toUpperCase();\n        } else {\n          newStr += newLetter;\n        }\n      }\n    }\n\n    return newStr;\n  }\n\n  return {\n    transform: transform,\n    reverse: reverse\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cyrillic-to-translit-js/CyrillicToTranslit.js\n");

/***/ }),

/***/ "./node_modules/lodash.invert/index.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash.invert/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */\n\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n/** Used to detect unsigned integer values. */\n\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\n\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n\n  return result;\n}\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\n\n\nfunction overArg(func, transform) {\n  return function (arg) {\n    return func(transform(arg));\n  };\n}\n/** Used for built-in method references. */\n\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeKeys = overArg(Object.keys, Object);\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\n\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\n\n\nvar baseFor = createBaseFor();\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\n\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n/**\n * The base implementation of `_.invert` and `_.invertBy` which inverts\n * `object` with values transformed by `iteratee` and set by `setter`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform values.\n * @param {Object} accumulator The initial inverted object.\n * @returns {Function} Returns `accumulator`.\n */\n\n\nfunction baseInverter(object, setter, iteratee, accumulator) {\n  baseForOwn(object, function (value, key, object) {\n    setter(accumulator, iteratee(value), key, object);\n  });\n  return accumulator;\n}\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\n\n\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n\n  var result = [];\n\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\n\n\nfunction createBaseFor(fromRight) {\n  return function (object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n\n    return object;\n  };\n}\n/**\n * Creates a function like `_.invertBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} toIteratee The function to resolve iteratees.\n * @returns {Function} Returns the new inverter function.\n */\n\n\nfunction createInverter(setter, toIteratee) {\n  return function (object, iteratee) {\n    return baseInverter(object, setter, toIteratee(iteratee), {});\n  };\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\n\n\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\n\n\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n  return value === proto;\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\n\n\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\n\n\nvar isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\n\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\n\n\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\n\n\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\n\n\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\n\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\n\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n/**\n * Creates an object composed of the inverted keys and values of `object`.\n * If `object` contains duplicate values, subsequent values overwrite\n * property assignments of previous values.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Object\n * @param {Object} object The object to invert.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\n *\n * _.invert(object);\n * // => { '1': 'c', '2': 'b' }\n */\n\n\nvar invert = createInverter(function (result, value, key) {\n  result[value] = key;\n}, constant(identity));\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\n\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\n\n\nfunction constant(value) {\n  return function () {\n    return value;\n  };\n}\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\n\n\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = invert;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.invert/index.js\n");

/***/ }),

/***/ "./node_modules/random-string/lib/random-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/random-string/lib/random-string.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * random-string\n * https://github.com/valiton/node-random-string\n *\n * Copyright (c) 2013 Valiton GmbH, Bastian 'hereandnow' Behrens\n * Licensed under the MIT license.\n */\n\n\nvar numbers = '0123456789',\n    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n    specials = '!$%^&*()_+|~-=`{}[]:;<>?,./';\n\nfunction _defaults(opts) {\n  opts || (opts = {});\n  return {\n    length: opts.length || 8,\n    numeric: typeof opts.numeric === 'boolean' ? opts.numeric : true,\n    letters: typeof opts.letters === 'boolean' ? opts.letters : true,\n    special: typeof opts.special === 'boolean' ? opts.special : false,\n    exclude: Array.isArray(opts.exclude) ? opts.exclude : []\n  };\n}\n\nfunction _buildChars(opts) {\n  var chars = '';\n\n  if (opts.numeric) {\n    chars += numbers;\n  }\n\n  if (opts.letters) {\n    chars += letters;\n  }\n\n  if (opts.special) {\n    chars += specials;\n  }\n\n  for (var i = 0; i <= opts.exclude.length; i++) {\n    chars = chars.replace(opts.exclude[i], \"\");\n  }\n\n  return chars;\n}\n\nmodule.exports = function randomString(opts) {\n  opts = _defaults(opts);\n\n  var i,\n      rn,\n      rnd = '',\n      len = opts.length,\n      exclude = opts.exclude,\n      randomChars = _buildChars(opts);\n\n  for (i = 1; i <= len; i++) {\n    rnd += randomChars.substring(rn = Math.floor(Math.random() * randomChars.length), rn + 1);\n  }\n\n  return rnd;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tLXN0cmluZy9saWIvcmFuZG9tLXN0cmluZy5qcz9lODc1Il0sIm5hbWVzIjpbIm51bWJlcnMiLCJsZXR0ZXJzIiwic3BlY2lhbHMiLCJfZGVmYXVsdHMiLCJvcHRzIiwibGVuZ3RoIiwibnVtZXJpYyIsInNwZWNpYWwiLCJleGNsdWRlIiwiQXJyYXkiLCJpc0FycmF5IiwiX2J1aWxkQ2hhcnMiLCJjaGFycyIsImkiLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJhbmRvbVN0cmluZyIsInJuIiwicm5kIiwibGVuIiwicmFuZG9tQ2hhcnMiLCJzdWJzdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBUWE7O0FBRWIsSUFBSUEsT0FBTyxHQUFHLFlBQWQ7QUFBQSxJQUNJQyxPQUFPLEdBQUcsc0RBRGQ7QUFBQSxJQUVJQyxRQUFRLEdBQUcsNkJBRmY7O0FBS0EsU0FBU0MsU0FBVCxDQUFvQkMsSUFBcEIsRUFBMEI7QUFDeEJBLE1BQUksS0FBS0EsSUFBSSxHQUFHLEVBQVosQ0FBSjtBQUNBLFNBQU87QUFDTEMsVUFBTSxFQUFFRCxJQUFJLENBQUNDLE1BQUwsSUFBZSxDQURsQjtBQUVMQyxXQUFPLEVBQUUsT0FBT0YsSUFBSSxDQUFDRSxPQUFaLEtBQXdCLFNBQXhCLEdBQW9DRixJQUFJLENBQUNFLE9BQXpDLEdBQW1ELElBRnZEO0FBR0xMLFdBQU8sRUFBRSxPQUFPRyxJQUFJLENBQUNILE9BQVosS0FBd0IsU0FBeEIsR0FBb0NHLElBQUksQ0FBQ0gsT0FBekMsR0FBbUQsSUFIdkQ7QUFJTE0sV0FBTyxFQUFFLE9BQU9ILElBQUksQ0FBQ0csT0FBWixLQUF3QixTQUF4QixHQUFvQ0gsSUFBSSxDQUFDRyxPQUF6QyxHQUFtRCxLQUp2RDtBQUtMQyxXQUFPLEVBQUVDLEtBQUssQ0FBQ0MsT0FBTixDQUFjTixJQUFJLENBQUNJLE9BQW5CLElBQW9DSixJQUFJLENBQUNJLE9BQXpDLEdBQW1EO0FBTHZELEdBQVA7QUFPRDs7QUFFRCxTQUFTRyxXQUFULENBQXNCUCxJQUF0QixFQUE0QjtBQUMxQixNQUFJUSxLQUFLLEdBQUcsRUFBWjs7QUFDQSxNQUFJUixJQUFJLENBQUNFLE9BQVQsRUFBa0I7QUFBRU0sU0FBSyxJQUFJWixPQUFUO0FBQW1COztBQUN2QyxNQUFJSSxJQUFJLENBQUNILE9BQVQsRUFBa0I7QUFBRVcsU0FBSyxJQUFJWCxPQUFUO0FBQW1COztBQUN2QyxNQUFJRyxJQUFJLENBQUNHLE9BQVQsRUFBa0I7QUFBRUssU0FBSyxJQUFJVixRQUFUO0FBQW9COztBQUN4QyxPQUFLLElBQUlXLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLElBQUlULElBQUksQ0FBQ0ksT0FBTCxDQUFhSCxNQUFsQyxFQUEwQ1EsQ0FBQyxFQUEzQyxFQUE4QztBQUM1Q0QsU0FBSyxHQUFHQSxLQUFLLENBQUNFLE9BQU4sQ0FBY1YsSUFBSSxDQUFDSSxPQUFMLENBQWFLLENBQWIsQ0FBZCxFQUErQixFQUEvQixDQUFSO0FBQ0Q7O0FBQ0QsU0FBT0QsS0FBUDtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQmIsSUFBdEIsRUFBNEI7QUFDM0NBLE1BQUksR0FBR0QsU0FBUyxDQUFDQyxJQUFELENBQWhCOztBQUNBLE1BQUlTLENBQUo7QUFBQSxNQUFPSyxFQUFQO0FBQUEsTUFDSUMsR0FBRyxHQUFHLEVBRFY7QUFBQSxNQUVJQyxHQUFHLEdBQUdoQixJQUFJLENBQUNDLE1BRmY7QUFBQSxNQUdJRyxPQUFPLEdBQUdKLElBQUksQ0FBQ0ksT0FIbkI7QUFBQSxNQUlJYSxXQUFXLEdBQUdWLFdBQVcsQ0FBQ1AsSUFBRCxDQUo3Qjs7QUFLQSxPQUFLUyxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLElBQUlPLEdBQWpCLEVBQXNCUCxDQUFDLEVBQXZCLEVBQTJCO0FBQ3pCTSxPQUFHLElBQUlFLFdBQVcsQ0FBQ0MsU0FBWixDQUFzQkosRUFBRSxHQUFHSyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCSixXQUFXLENBQUNoQixNQUF2QyxDQUEzQixFQUEyRWEsRUFBRSxHQUFHLENBQWhGLENBQVA7QUFDRDs7QUFDRCxTQUFPQyxHQUFQO0FBQ0QsQ0FYRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yYW5kb20tc3RyaW5nL2xpYi9yYW5kb20tc3RyaW5nLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHJhbmRvbS1zdHJpbmdcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS92YWxpdG9uL25vZGUtcmFuZG9tLXN0cmluZ1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMyBWYWxpdG9uIEdtYkgsIEJhc3RpYW4gJ2hlcmVhbmRub3cnIEJlaHJlbnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBudW1iZXJzID0gJzAxMjM0NTY3ODknLFxuICAgIGxldHRlcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsXG4gICAgc3BlY2lhbHMgPSAnISQlXiYqKClfK3x+LT1ge31bXTo7PD4/LC4vJztcblxuXG5mdW5jdGlvbiBfZGVmYXVsdHMgKG9wdHMpIHtcbiAgb3B0cyB8fCAob3B0cyA9IHt9KTtcbiAgcmV0dXJuIHtcbiAgICBsZW5ndGg6IG9wdHMubGVuZ3RoIHx8IDgsXG4gICAgbnVtZXJpYzogdHlwZW9mIG9wdHMubnVtZXJpYyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5udW1lcmljIDogdHJ1ZSxcbiAgICBsZXR0ZXJzOiB0eXBlb2Ygb3B0cy5sZXR0ZXJzID09PSAnYm9vbGVhbicgPyBvcHRzLmxldHRlcnMgOiB0cnVlLFxuICAgIHNwZWNpYWw6IHR5cGVvZiBvcHRzLnNwZWNpYWwgPT09ICdib29sZWFuJyA/IG9wdHMuc3BlY2lhbCA6IGZhbHNlLFxuICAgIGV4Y2x1ZGU6IEFycmF5LmlzQXJyYXkob3B0cy5leGNsdWRlKSAgICAgICA/IG9wdHMuZXhjbHVkZSA6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIF9idWlsZENoYXJzIChvcHRzKSB7XG4gIHZhciBjaGFycyA9ICcnO1xuICBpZiAob3B0cy5udW1lcmljKSB7IGNoYXJzICs9IG51bWJlcnM7IH1cbiAgaWYgKG9wdHMubGV0dGVycykgeyBjaGFycyArPSBsZXR0ZXJzOyB9XG4gIGlmIChvcHRzLnNwZWNpYWwpIHsgY2hhcnMgKz0gc3BlY2lhbHM7IH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gb3B0cy5leGNsdWRlLmxlbmd0aDsgaSsrKXtcbiAgICBjaGFycyA9IGNoYXJzLnJlcGxhY2Uob3B0cy5leGNsdWRlW2ldLCBcIlwiKTtcbiAgfVxuICByZXR1cm4gY2hhcnM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKG9wdHMpIHtcbiAgb3B0cyA9IF9kZWZhdWx0cyhvcHRzKTtcbiAgdmFyIGksIHJuLFxuICAgICAgcm5kID0gJycsXG4gICAgICBsZW4gPSBvcHRzLmxlbmd0aCxcbiAgICAgIGV4Y2x1ZGUgPSBvcHRzLmV4Y2x1ZGUsXG4gICAgICByYW5kb21DaGFycyA9IF9idWlsZENoYXJzKG9wdHMpO1xuICBmb3IgKGkgPSAxOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgcm5kICs9IHJhbmRvbUNoYXJzLnN1YnN0cmluZyhybiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmRvbUNoYXJzLmxlbmd0aCksIHJuICsgMSk7XG4gIH1cbiAgcmV0dXJuIHJuZDtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/random-string/lib/random-string.js\n");

/***/ }),

/***/ "./src/js/some.js":
/*!************************!*\
  !*** ./src/js/some.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var cyrillic_to_translit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cyrillic-to-translit-js */ \"./node_modules/cyrillic-to-translit-js/CyrillicToTranslit.js\");\n/* harmony import */ var cyrillic_to_translit_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cyrillic_to_translit_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar randomString = __webpack_require__(/*! random-string */ \"./node_modules/random-string/lib/random-string.js\");\n\nvar cyrillicToTranslit = new cyrillic_to_translit_js__WEBPACK_IMPORTED_MODULE_0___default.a();\nvar formName = document.querySelector('.form-name');\nvar firstname = document.querySelector('#firstname');\nvar lastname = document.querySelector('#lastname');\nvar patronymic = document.querySelector('#patronymic');\nvar formRange = document.querySelector('.form-range');\nvar formLabelRange = document.querySelector('#form-label-range');\nvar result = document.querySelector('#result');\nvar loginHTML = document.querySelector('#login');\nvar pwdHTML = document.querySelector('#pwd');\nformLabelRange.innerHTML = \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u043E\\u0432 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044F = \".concat(formRange.value);\nformRange.addEventListener('change', function (e) {\n  console.log(formRange.value);\n  formLabelRange.innerHTML = \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u043E\\u0432 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044F = \".concat(formRange.value);\n});\nformName.addEventListener('submit', function (e) {\n  e.preventDefault();\n  var name = \"\".concat(firstname.value, \" \").concat(lastname.value, \" \").concat(patronymic.value);\n  var login = getLogin(firstname.value, lastname.value, patronymic.value);\n  var password = randomString({\n    length: formRange.value\n  });\n  loginHTML.innerHTML = \"\\u041B\\u043E\\u0433\\u0438\\u043D - \".concat(login);\n  pwdHTML.innerHTML = \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C - \".concat(password);\n  result.classList.remove('d-none');\n  console.log(formRange.value);\n});\n\nfunction getLogin(firstname, lastname, patronymic) {\n  var shortName = \"\".concat(firstname).concat(lastname.substring(0, 1)).concat(patronymic.substring(0, 1));\n  console.log('shortName', shortName);\n  var translitFirstname = cyrillicToTranslit.transform(firstname);\n  var translitLastPatr = cyrillicToTranslit.transform(\"\".concat(lastname.substring(0, 1)).concat(patronymic.substring(0, 1)));\n  return \"\".concat(translitFirstname).concat(getRandomInt(1000, 9999)).concat(translitLastPatr);\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc29tZS5qcz81Y2FmIl0sIm5hbWVzIjpbInJhbmRvbVN0cmluZyIsInJlcXVpcmUiLCJjeXJpbGxpY1RvVHJhbnNsaXQiLCJDeXJpbGxpY1RvVHJhbnNsaXQiLCJmb3JtTmFtZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZpcnN0bmFtZSIsImxhc3RuYW1lIiwicGF0cm9ueW1pYyIsImZvcm1SYW5nZSIsImZvcm1MYWJlbFJhbmdlIiwicmVzdWx0IiwibG9naW5IVE1MIiwicHdkSFRNTCIsImlubmVySFRNTCIsInZhbHVlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJjb25zb2xlIiwibG9nIiwicHJldmVudERlZmF1bHQiLCJuYW1lIiwibG9naW4iLCJnZXRMb2dpbiIsInBhc3N3b3JkIiwibGVuZ3RoIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2hvcnROYW1lIiwic3Vic3RyaW5nIiwidHJhbnNsaXRGaXJzdG5hbWUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xpdExhc3RQYXRyIiwiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInJhbmRvbSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0EsSUFBSUEsWUFBWSxHQUFHQyxtQkFBTyxDQUFDLHdFQUFELENBQTFCOztBQUVBLElBQU1DLGtCQUFrQixHQUFHLElBQUlDLDhEQUFKLEVBQTNCO0FBRUEsSUFBTUMsUUFBUSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBakI7QUFDQSxJQUFNQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixZQUF2QixDQUFsQjtBQUNBLElBQU1FLFFBQVEsR0FBR0gsUUFBUSxDQUFDQyxhQUFULENBQXVCLFdBQXZCLENBQWpCO0FBQ0EsSUFBTUcsVUFBVSxHQUFHSixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsYUFBdkIsQ0FBbkI7QUFFQSxJQUFN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RCxDQUg0QixDQUcwQjtBQUN2RCIsImZpbGUiOiIuL3NyYy9qcy9zb21lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEN5cmlsbGljVG9UcmFuc2xpdCBmcm9tICdjeXJpbGxpYy10by10cmFuc2xpdC1qcyc7XHJcbnZhciByYW5kb21TdHJpbmcgPSByZXF1aXJlKCdyYW5kb20tc3RyaW5nJyk7XHJcblxyXG5jb25zdCBjeXJpbGxpY1RvVHJhbnNsaXQgPSBuZXcgQ3lyaWxsaWNUb1RyYW5zbGl0KCk7XHJcblxyXG5jb25zdCBmb3JtTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLW5hbWUnKVxyXG5jb25zdCBmaXJzdG5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RuYW1lJylcclxuY29uc3QgbGFzdG5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGFzdG5hbWUnKVxyXG5jb25zdCBwYXRyb255bWljID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhdHJvbnltaWMnKVxyXG5cclxuY29uc3QgZm9ybVJhbmdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0tcmFuZ2UnKVxyXG5jb25zdCBmb3JtTGFiZWxSYW5nZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtLWxhYmVsLXJhbmdlJylcclxuXHJcbmNvbnN0IHJlc3VsdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXN1bHQnKVxyXG5jb25zdCBsb2dpbkhUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9naW4nKVxyXG5jb25zdCBwd2RIVE1MID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3B3ZCcpXHJcblxyXG5mb3JtTGFiZWxSYW5nZS5pbm5lckhUTUwgPSBg0JrQvtC70LjRh9C10YHRgtCy0L4g0YHQuNC80LLQvtC70L7QsiDQv9Cw0YDQvtC70Y8gPSAke2Zvcm1SYW5nZS52YWx1ZX1gXHJcblxyXG5mb3JtUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGZvcm1SYW5nZS52YWx1ZSk7XHJcbiAgICBmb3JtTGFiZWxSYW5nZS5pbm5lckhUTUwgPSBg0JrQvtC70LjRh9C10YHRgtCy0L4g0YHQuNC80LLQvtC70L7QsiDQv9Cw0YDQvtC70Y8gPSAke2Zvcm1SYW5nZS52YWx1ZX1gXHJcbn0pXHJcblxyXG5cclxuZm9ybU5hbWUuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgbGV0IG5hbWUgPSBgJHtmaXJzdG5hbWUudmFsdWV9ICR7bGFzdG5hbWUudmFsdWV9ICR7cGF0cm9ueW1pYy52YWx1ZX1gXHJcbiAgICBsZXQgbG9naW4gPSBnZXRMb2dpbihmaXJzdG5hbWUudmFsdWUsIGxhc3RuYW1lLnZhbHVlLCBwYXRyb255bWljLnZhbHVlKVxyXG4gICAgbGV0IHBhc3N3b3JkID0gcmFuZG9tU3RyaW5nKHtsZW5ndGg6IGZvcm1SYW5nZS52YWx1ZX0pO1xyXG4gICAgbG9naW5IVE1MLmlubmVySFRNTCA9IGDQm9C+0LPQuNC9IC0gJHtsb2dpbn1gXHJcbiAgICBwd2RIVE1MLmlubmVySFRNTCA9IGDQn9Cw0YDQvtC70YwgLSAke3Bhc3N3b3JkfWBcclxuICAgIHJlc3VsdC5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKVxyXG4gICAgY29uc29sZS5sb2coZm9ybVJhbmdlLnZhbHVlKTtcclxufSlcclxuXHJcbmZ1bmN0aW9uIGdldExvZ2luKGZpcnN0bmFtZSwgbGFzdG5hbWUsIHBhdHJvbnltaWMpe1xyXG4gICAgbGV0IHNob3J0TmFtZSA9IGAke2ZpcnN0bmFtZX0ke2xhc3RuYW1lLnN1YnN0cmluZygwLDEpfSR7cGF0cm9ueW1pYy5zdWJzdHJpbmcoMCwxKX1gXHJcbiAgICBjb25zb2xlLmxvZygnc2hvcnROYW1lJywgc2hvcnROYW1lKVxyXG4gICAgbGV0IHRyYW5zbGl0Rmlyc3RuYW1lID0gY3lyaWxsaWNUb1RyYW5zbGl0LnRyYW5zZm9ybShmaXJzdG5hbWUpXHJcbiAgICBsZXQgdHJhbnNsaXRMYXN0UGF0ciA9IGN5cmlsbGljVG9UcmFuc2xpdC50cmFuc2Zvcm0oYCR7bGFzdG5hbWUuc3Vic3RyaW5nKDAsMSl9JHtwYXRyb255bWljLnN1YnN0cmluZygwLDEpfWApXHJcbiAgICByZXR1cm4gYCR7dHJhbnNsaXRGaXJzdG5hbWV9JHtnZXRSYW5kb21JbnQoMTAwMCw5OTk5KX0ke3RyYW5zbGl0TGFzdFBhdHJ9YFxyXG4gICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkge1xyXG4gICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluOyAvL9Cc0LDQutGB0LjQvNGD0Lwg0L3QtSDQstC60LvRjtGH0LDQtdGC0YHRjywg0LzQuNC90LjQvNGD0Lwg0LLQutC70Y7Rh9Cw0LXRgtGB0Y9cclxuICB9XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/some.js\n");

/***/ })

/******/ });